#pragma once

#ifndef HIGO_FM_H_
#define HIGO_FM_H_


#include <gohi_hw/robot_abstract.h>
#include "stdio.h"
#include "string.h"


static const unsigned short int MESSAGE_BUFER_SIZE = 100;  //limite one message's size
														   /****structure for communications protocol , read Hands Free Link Manua.doc for detail****/
typedef struct HFMessage {
	unsigned char sender_id;
	unsigned char receiver_id;
	unsigned short int length;
	unsigned char data[MESSAGE_BUFER_SIZE];
}HFMessage;


	//comand type
enum CMD_WORD
{
	SHAKING_HANDS,
	READ_ROBOT_SYSTEM_INFO,
	SET_GLOBAL_SPEED,
	READ_GLOBAL_SPEED,
	SET_ROBOT_SPEED,
	READ_ROBOT_SPEED,
	SET_MOTOR_SPEED,
	READ_MOTOR_SPEED,
	READ_MOTOR_MILEAGE,
	READ_GLOBAL_COORDINATE,
	READ_ROBOT_COORDINATE,
	CLEAR_COORDINATE_DATA,
	SET_ARM_1,
	READ_ARM_1,
	SET_ARM_2,
	READ_ARM_2,
	SET_HEAD_1,
	READ_HEAD_1,
	SET_HEAD_2,
	READ_HEAD_2,
	READ_IMU_DATA,
	SET_ROBOY_PARAMETERS,
	SAVE_ROBOY_PARAMETERS,
	SET_MOTOR_PARAMETERS,
	SAVE_MOTOR_PARAMETERS,
	LAST_COMMAND_FLAG
};
enum REV_STATE
{
	WAITING_FF1,
	WAITING_FF2,
	SENDER_ID,
	RECEIVER_ID,
	RECEIVE_LEN_H,
	RECEIVE_LEN_L,
	RECEIVE_PACKAGE,
	RECEIVE_CHECK
};


class HIGO_FM
{
public:
	HIGO_FM(unsigned char my_id_ = 0x11, unsigned char friend_id_ = 0x01, ROBOT_ABSTRACT* my_robot_ = 0)
	{
		my_id = my_id_;         //0x11 means slave ,  read Hands Free Link Manua.doc for detail
		friend_id = friend_id_; 

		my_robot = my_robot_;
	
		receive_state_ = WAITING_FF1;
		command_state_ = SHAKING_HANDS;
		rx_message_.sender_id = 0;
		rx_message_.receiver_id = 0;
		rx_message_.length = 0;

		tx_message_.sender_id = 0;
		tx_message_.receiver_id = 0;
		tx_message_.length = 0;

		receive_package_count = 0;

		send_packag_count = 0;
		tx_buffer[0] = 0;
		tx_buffer_length = 0;
	}
public:
	// only for master
	//the master can use masterSendCommand function to send data to slave
	//like SET_GLOBAL_SPEED , READ_ROBOT_SYSTEM_INFO, READ_ROBOT_SPEED...
	unsigned char  send_package(const CMD_WORD command_word);//发送命令

	inline unsigned char getReceiveRenewFlag(const CMD_WORD command_word) const
	{
		return receive_package_renew[command_word];
	}
	inline unsigned char* getSerializedData(void)
	{
		return tx_buffer;
	}
	inline int getSerializedLength(void)
	{
		return tx_buffer_length;
	}
public: // only for slave
		//command updata flag , the robot need to traverse These flag to decide update his own behavior
	unsigned char receive_package_renew[LAST_COMMAND_FLAG];
	unsigned char shaking_hands_state;    //1 Success   0 Failed
public:
	bool receive_package_process(const unsigned char data);//接收功能包
	//inline void set_my_id(unsigned char id) { my_id = id; }
	//inline void set_friend_id(unsigned char id) { friend_id = id; }


private:
	unsigned char my_id;
	unsigned char friend_id;
										 
	ROBOT_ABSTRACT* my_robot;
	REV_STATE   receive_state_;
	CMD_WORD    command_state_;
	HFMessage   rx_message_, tx_message_;

	float         receive_package_count;
	float         send_packag_count;

	unsigned char tx_buffer[MESSAGE_BUFER_SIZE + 20];
	unsigned      tx_buffer_length;

	unsigned int  receive_check_sum_;
	short int     receive_message_length_;
	short int     msg_d_byte_cnt_;

    unsigned char  receive_state_machine(const  unsigned char rx_data);//接收的状态机
	unsigned char package_analysis(void);//解析功能包


	unsigned char readCommandAnalysis(const CMD_WORD  command_word, unsigned char * p, const unsigned short int  len);   //读命令解析
	unsigned char setCommandAnalysis(const CMD_WORD  command_word, unsigned char * p, const unsigned short int  len);  //写命令解析

	
	void pack_frame(const CMD_WORD command_word, unsigned char* p, const unsigned short int len);  //准备发送帧
	void pack_package(void);       //准备发送包


};

#endif
